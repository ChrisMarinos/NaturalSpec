module Problem12
  
open NaturalSpec

// Problem 12
// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
// The first ten terms would be:
// 
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// 
// Let us list the factors of the first seven triangle numbers:
// 
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// 
// We can see that 28 is the first triangle number to have over five divisors.
// 
// What is the value of the first triangle number to have over five hundred divisors?

let triangles =
    Seq.unfold (fun (last,i) -> 
      let sum = last + i 
      Some(sum, (sum, i+1))) 
      (0,1)

let triangleFactors =
   triangles
     |> Seq.map (fun t -> t,divisors t)
     |> Seq.map (fun (t,f) -> t,Seq.length f)

let Triangles n =
   printMethod ""
   triangles
     |> Seq.take n
     |> Seq.toList

let TriangleFactors n =
   printMethod ""
   triangleFactors
     |> Seq.map snd
     |> Seq.take n
     |> Seq.toList

let TriangleWithMoreFactors minFactors =
   printMethod ""
   triangleFactors
     |> Seq.skipWhile (fun (t,fc) -> fc < minFactors)
     |> Seq.map fst
     |> Seq.head

[<Scenario>]      
let ``First 10 triangles``() =
    Given 10
      |> When calculating Triangles
      |> It should equal [1; 3; 6; 10; 15; 21; 28; 36; 45; 55]
      |> Verify

[<Scenario>]      
let ``Factors of first 7 triangles``() =
    Given 7
      |> When calculating TriangleFactors
      |> It should equal [1; 2; 4; 4; 4; 4; 6]
      |> Verify

[<Scenario>]      
let ``Find first triangle with over 5 divisors``() =
    Given 5
      |> When calculating TriangleWithMoreFactors
      |> It should equal 28
      |> Verify

[<Scenario>]      
let ``Find first triangle with over 500 divisors``() =
    Given 500
      |> When calculating TriangleWithMoreFactors
      |> It should equal 76576500
      |> Verify